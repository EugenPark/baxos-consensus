syntax = "proto3";
option go_package = "common/";

/*
  Client batch refers to a client request batch, or a client response batch
  Client request batch is sent by a client once it has collected a batch of client requests
  Client response batch is sent by a replica node
*/

message SingleOperation {
  string command = 1;
}

message ClientBatch {
  string unique_id = 1;
  repeated SingleOperation requests = 2;
  int64 sender = 3;
}

/*
  replica batch refers to a single value proposed in a consensus message
*/

message ReplicaBatch {
  repeated ClientBatch requests = 1;
}

/*
  Status is sent by a client to inform replicas about actions that include, but not limited to
  1. To establish connections to other nodes
  2. To write the logs to files
*/

message Status {
  int32 type = 1; // 1 for bootstrap, 2 for log print
  string note = 2;
  int64 sender = 3;
}

message PrepareRequest {
  int32 instance_number = 1;
  int32 prepare_ballot = 2;
  int64 sender = 3;
}

message PromiseReply {
  int32 instance_number = 1;
  bool promise = 2;
  int64 last_promised_ballot = 3;

  int64 last_accepted_ballot = 4;
  ReplicaBatch last_accepted_value = 5;

  bool decided = 6; // if the current instance is already decided
  ReplicaBatch decided_value = 7;
  int64 sender = 8;
}

message DecideInfo{
  int32 instance_number = 1;
  ReplicaBatch decided_value = 2;
}

message ProposeRequest {
  int32 instance_number = 1;
  int32 propose_ballot = 2;
  ReplicaBatch propose_value = 3;

  int64 sender = 4;
  DecideInfo decide_info = 5;
}

message AcceptReply {
  int32 instance_number = 1;
  bool accept = 2;
  int64 accept_ballot = 3;

  bool decided = 4; // if the current instance is already decided
  ReplicaBatch decided_value = 5;

  int64 sender = 6;
}