syntax = "proto3";
option go_package = "proto/";

/*
  Client batch refers to a client request batch, or a client response batch
  Client request batch is sent by a client once it has collected a batch of client requests
  Client response batch is sent by a replica node
*/

message SingleOperation {
  string command = 1;
}

message ClientBatch {
  string unique_id = 1;
  repeated SingleOperation requests = 2;
  int64 sender = 3;
}

/*
  replica batch refers to a single value proposed in a consensus message
*/

message ReplicaBatch {
  string unique_id = 1;
  repeated ClientBatch requests = 2;
}

/*
  Status is sent by a client to inform replicas about actions that include, but not limited to
  1. To establish connections to other nodes
  2. To write the logs to files
  3. Bootstrap consensus
*/

message Status {
  int32 type = 1; // 1 for bootstrap, 2 for log print, 3 consensus start
  string note = 2;
  int64 sender = 3;
}

// instance serves as a container for 1) promise response for accepted value, 2) decided entries

message instance{
  int32 instance_number = 1;
  int32 ballot = 2;
  ReplicaBatch value = 3;
}

message PrepareRequest {
  int32 instance_number = 1;
  int32 ballot = 2;

  instance last_decided = 3; // for instance_numer - 1 if the slot is already decided
}

message PromiseReply {
  bool promise = 1;

  int64 last_promised_ballot = 2;

  bool decided = 3; // if the current instance is already decided
  instance decided_value = 4;

  instance last_accepted_instance = 5;
}

message ProposeRequest {



  int32 instance_number = 1;
  int32 ballot = 2;
  ReplicaBatch value = 3;
}

message AcceptReply {
  bool accept = 1;
  int64 last_promised_ballot = 2;
}

service Consensus {
  rpc phase_1 (PrepareRequest) returns (PromiseReply);
  rpc phase_2 (ProposeRequest) returns (AcceptReply);
}